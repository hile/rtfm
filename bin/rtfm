#!/usr/bin/env python

USAGE = """RFC cache and lookup tool

Search and read local copies of RFC documents
"""

import os
from systematic.shell import Script, ScriptCommand, ScriptError
from rtfm.rfccache import RFCIndex, RFCCacheError, RFC_DEFAULT_CACHE_DIR


class RTFMCliCommand(ScriptCommand):
    def parse_args(self, args):
        self.cache = RFCIndex(cachedir=args.cache_dir)
        return args


class UpdateCommand(RTFMCliCommand):
    def run(self, args):
        args = self.parse_args(args)

        self.message('Updating RFC index: {0}'.format(self.cache.path))
        self.cache.update()

        self.message('Updating RFC files and search cache...')
        for rfc in self.cache:
            if not rfc.exists:
                self.message('Downloading RFC {0}'.format(rfc.number))
                rfc.update()

        self.cache.update_missing_indexes()


class StatusCommand(RTFMCliCommand):
    def run(self, args):
        args = self.parse_args(args)
        self.message('Total {0} RFCs, {1} in cache'.format(len(self.cache), len(self.cache.get_indexed())))


class SearchCommand(RTFMCliCommand):
    def run(self, args):
        args = self.parse_args(args)
        for rfc in self.cache.search(terms=args.terms, bodysearch=args.body):
            script.message('RFC {0:<4d} {1}'.format(rfc.number, rfc.title))


class ListCommand(RTFMCliCommand):
    def run(self, args):
        args = self.parse_args(args)
        for rfc in self.cache:
            script.message('RFC {0:<4d} {1}'.format(rfc.number, rfc.title))


class ShowCommand(RTFMCliCommand):

    @property
    def pager(self):
        return os.environ.get('PAGER', 'less')

    def run(self, args):
        args = self.parse_args(args)

        try:
            rfc = self.cache.get_by_number(args.number)
        except RFCCacheError as e:
            self.exit(1, e)

        if args.title:
            self.message('RFC {0}: {1}'.format(rfc.number, rfc.title))
        else:
            os.execvp(self.pager, [self.pager, rfc.path])


script = Script(description=USAGE)
script.add_argument('-c', '--cache-dir', default=RFC_DEFAULT_CACHE_DIR, help='RFC Cache Directory')

c = script.add_subcommand(SearchCommand('search', 'Search RFCs'))
c.add_argument('-b', '--body', action='store_true', help='Search RFC body')
c.add_argument('terms', nargs='*', help='RFC search terms to use')

c = script.add_subcommand(ShowCommand('show', 'Show RFC'))
c.add_argument('-t', '--title', action='store_true', help='Show RFC title')
c.add_argument('number', type=int, help='RFC number to use')

c = script.add_subcommand(ListCommand('list', 'List RFCs'))

c = script.add_subcommand(UpdateCommand('update', 'Update local RFC cache'))
c.add_argument('--quiet', action='store_true', help='Do not show messages')

c = script.add_subcommand(StatusCommand('status', 'Show RFC cache status'))

args = script.parse_args()
